{
    "modulo": "JavaScript Avanzado",
    "diccionario": [
        {
            "termino": "Clase",
            "definicion": "Una plantilla para crear objetos que comparten propiedades y métodos.",
            "contexto": "Se usa para organizar el código en bloques reutilizables y estructurados."
        },
        {
            "termino": "Instancia de clase",
            "definicion": "Es un objeto creado a partir de una clase usando la palabra clave `new`.",
            "contexto": "Cada vez que haces `new MiClase()`, estás creando una instancia."
        },
        {
            "termino": "Constructor",
            "definicion": "Una función especial dentro de una clase que se ejecuta al crear una nueva instancia.",
            "contexto": "Sirve para definir valores iniciales de un objeto."
        },
        {
            "termino": "Método",
            "definicion": "Una función definida dentro de una clase que pertenece a los objetos creados.",
            "contexto": "Un método puede ser usado por todas las instancias de la clase."
        },
        {
            "termino": "Herencia",
            "definicion": "Permite que una clase obtenga propiedades y métodos de otra clase.",
            "contexto": "Se usa con la palabra `extends` y permite reutilizar código."
        },
        {
            "termino": "super()",
            "definicion": "Función que llama al constructor de la clase padre desde una clase hija.",
            "contexto": "Se usa dentro del constructor de una subclase para inicializar propiedades del padre."
        },
        {
            "termino": "Encapsulamiento",
            "definicion": "Ocultar los detalles internos de una clase y exponer solo lo necesario.",
            "contexto": "Se pueden usar propiedades privadas con `#` para proteger información."
        },
        {
            "termino": "Método estático",
            "definicion": "Una función que pertenece a la clase y no a las instancias.",
            "contexto": "Se llama con `NombreDeClase.metodo()` y no requiere crear un objeto."
        },
        {
            "termino": "SOLID",
            "definicion": "Conjunto de 5 principios para escribir código más limpio y organizado.",
            "contexto": "Cada letra representa una buena práctica en programación orientada a objetos."
        },
        {
            "termino": "Abstracción",
            "definicion": "Consiste en mostrar solo los detalles importantes y ocultar los irrelevantes.",
            "contexto": "Ayuda a enfocarse en lo que el objeto debe hacer, no en cómo lo hace."
        },
        {
            "termino": "Polimorfismo",
            "definicion": "Capacidad de usar el mismo método con diferentes comportamientos según el objeto.",
            "contexto": "Se usa en clases hijas que redefinen métodos de la clase padre."
        },
        {
            "termino": "Responsabilidad única",
            "definicion": "Principio que dice que cada parte del código debe hacer solo una cosa.",
            "contexto": "Hace que el código sea más fácil de mantener y entender."
        },
        {
            "termino": "Extensión sin modificación",
            "definicion": "El código debe poder ampliarse sin cambiar el original.",
            "contexto": "Relacionado con el principio abierto/cerrado de SOLID."
        }
    ]
}