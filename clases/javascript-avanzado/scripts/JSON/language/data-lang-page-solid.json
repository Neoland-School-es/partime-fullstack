{
    "modulo": "JavaScript Avanzado",
    "clase": "Principios SOLID en JavaScript",
    "descripcion": "Introducción a los principios SOLID como guía para escribir código limpio, mantenible y escalable en JavaScript.",
    "temas": [
        {
            "titulo": "¿Qué es SOLID?",
            "contenido": "SOLID es un acrónimo que representa el conjunto de cinco principios que ayudan a organizar mejor el código en programación orientada a objetos. Aunque vienen de lenguajes como Java o C#, también se pueden aplicar en JavaScript para que nuestro código sea más fácil de leer, mantener y escalar."
        },
        {
            "titulo": "S - Principio de Responsabilidad Única (Single Responsibility)",
            "contenido": "Cada función o módulo debe encargarse de una sola cosa. Así el código es más claro, más fácil de probar y más fácil de cambiar sin romper otras partes."
        },
        {
            "titulo": "O - Principio Abierto/Cerrado (Open/Closed)",
            "contenido": "El código debe permitir ser extendido sin modificar el original."
        },
        {
            "titulo": "L - Principio de Sustitución de Liskov",
            "contenido": "Si una clase hereda de otra, debe poder usarse sin que el programa falle. Es decir, las clases hijas deben comportarse como sus padres. Esto evita errores cuando usamos herencia o clases polimórficas."
        },
        {
            "titulo": "I - Principio de Segregación de Interfaces",
            "contenido": "Es mejor tener muchas interfaces pequeñas y específicas que una muy grande y genérica. Así los objetos solo implementan lo que necesitan, evitando código innecesario."
        },
        {
            "titulo": "D - Principio de Inversión de Dependencias",
            "contenido": "Los módulos principales no deben depender directamente de módulos secundarios. En su lugar, ambos deben depender de abstracciones (como funciones genéricas o interfaces). Esto permite que el código sea más flexible y fácil de probar."
        }
    ]
}