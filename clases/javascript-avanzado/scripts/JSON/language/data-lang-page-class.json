{
    "modulo": "JavaScript Avanzado",
    "clase": "Clases en JavaScript",
    "descripcion": "Una forma de organizar y estructurar el código usando el paradigma orientado a objetos.",
    "temas": [
        {
            "titulo": "¿Qué es una clase en JavaScript?",
            "contenido": "Una clase es una plantilla para crear objetos. Permite definir propiedades y métodos que los objetos creados con esa clase compartirán. Fue introducida en ECMAScript 2015 (ES6) como una forma más clara de trabajar con objetos y herencia."
        },
        {
            "titulo": "Sintaxis básica de una clase",
            "contenido": "La sintaxis básica incluye la palabra clave `class`, un nombre de clase (usar sustantivos y PascalCase para nombrar las clases), un constructor (opcional) y uno o más métodos. El constructor es una función especial que se ejecuta al crear una nueva instancia de la clase."
        },
        {
            "titulo": "Instanciación de clases",
            "contenido": "Una clase se instancia usando la palabra clave `new`, lo que crea un nuevo objeto con las propiedades y métodos definidos en la clase."
        },
        {
            "titulo": "Herencia en clases",
            "contenido": "Una clase puede heredar de otra usando la palabra clave `extends`. Esto permite que la clase hija herede propiedades y métodos de la clase padre. El método `super()` se utiliza para llamar al constructor de la clase padre."
        },
        {
            "titulo": "Encapsulamiento, propiedades y métodos públicos y privados",
            "contenido": "El encapsulamiento consiste en ocultar los detalles internos del funcionamiento de una clase y exponer solo lo necesario. se declaran propiedades y métodos privados usando el prefijo o modificador `#`."
        },
        {
            "titulo": "Métodos y propiedades estáticos",
            "contenido": "Los métodos estáticos son funciones que pertenecen a la clase, no a sus instancias. Se definen usando la palabra clave `static` y se llaman directamente desde la clase."
        },
        {
            "titulo": "Getters y Setters",
            "contenido": "Permiten definir métodos especiales que se comportan como propiedades. `get` se usa para obtener el valor y `set` para modificarlo, lo cual ayuda a controlar el acceso a los datos de una instancia."
        },
        {
            "titulo": "Composición",
            "contenido": "La composición consiste en construir clases usando otras clases como partes internas. En lugar de heredar, una clase contiene instancias de otras."
        }
    ]
}